/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/About'
import { Route as AppRouteImport } from './routes/app/routes'
import { Route as IndexImport } from './ro./routes/app/route
import { Route as ProductPidImport } from './routes/Product.$pid'

// Create Virtual Routes

const ProductsLazyImport = createFileRoute('/Products')()

// Create/Update Routes

const ProductsLazyRoute = ProductsLazyImport.update({
  id: '/Products',
  path: '/Products',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/Products.lazy').then((d) => d.Route))

const AboutRoute = AboutImport.update({
  id: '/About',
  path: '/About',
  getParentRoute: () => rootRoute,
} as any)

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductPidRoute = ProductPidImport.update({
  id: '/Product/$pid',
  path: '/Product/$pid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/About': {
      id: '/About'
      path: '/About'
      fullPath: '/About'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/Products': {
      id: '/Products'
      path: '/Products'
      fullPath: '/Products'
      preLoaderRoute: typeof ProductsLazyImport
      parentRoute: typeof rootRoute
    }
    '/Product/$pid': {
      id: '/Product/$pid'
      path: '/Product/$pid'
      fullPath: '/Product/$pid'
      preLoaderRoute: typeof ProductPidImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRoute
  '/About': typeof AboutRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRoute
  '/About': typeof AboutRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRoute
  '/About': typeof AboutRoute
  '/Products': typeof ProductsLazyRoute
  '/Product/$pid': typeof ProductPidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/About' | '/Products' | '/Product/$pid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/About' | '/Products' | '/Product/$pid'
  id: '__root__' | '/' | '/app' | '/About' | '/Products' | '/Product/$pid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRoute
  AboutRoute: typeof AboutRoute
  ProductsLazyRoute: typeof ProductsLazyRoute
  ProductPidRoute: typeof ProductPidRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRoute,
  AboutRoute: AboutRoute,
  ProductsLazyRoute: ProductsLazyRoute,
  ProductPidRoute: ProductPidRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/app",
        "/About",
        "/Products",
        "/Product/$pid"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/app": {
      "filePath": "app/route.jsx"
    },
    "/About": {
      "filePath": "About.jsx"
    },
    "/Products": {
      "filePath": "Products.lazy.jsx"
    },
    "/Product/$pid": {
      "filePath": "Product.$pid.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
